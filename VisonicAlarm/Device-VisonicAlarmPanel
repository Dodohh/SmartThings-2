/**
 *  Copyright 2017 Chris Charles
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Visonic Controller
 *
 *  Author: Chris Charles (cjcharles0)
 *  Date: 2017-02-10
 */

import groovy.json.JsonSlurper

metadata {
	definition (name: "Visonic Alarm Panel", namespace: "cjcharles0", author: "Chris Charles") {
		capability "Refresh"
        capability "Configuration"
		capability "Alarm"
        capability "Polling"
        
        attribute "device.status", "string"
        attribute "armaway", "string"
        attribute "armhome", "string"
        attribute "disarm", "string"
        attribute "alarm", "enum"
        attribute "lastaction", "string"
        
        command "VisonicArmAway"
        command "VisonicArmHome"
        command "VisonicDisarm"
        command "Vcreatezonedevices"
        command "Vremovezonedevices"
        command "Vtestfunction"
        command "updateZonesNS"
        command "off"
        command "strobe"
        command "siren"
        command "both"
	}

	simulator {
	}
    
    preferences {
        
        input("password", "password", title:"Password", required:false, displayDuringSetup:true)
        input("ip", "string", title:"Visonic IP Address", description: "e.g. 192.168.1.10", required: true, displayDuringSetup: true)
        input("inactivityseconds", "string", title:"Motion sensor inactivity timeout", description: "override the default of 10s (60s max)", required: false, displayDuringSetup: false)
        input("prename", "string", title:"Add before zone name", description: "e.g. 'Visonic' would give 'Visonic Kitchen'", required: false, displayDuringSetup: true)
        input("postname", "string", title:"Add after zone name", description: "e.g. 'Visonic' would give 'Kitchen Visonic'", required: false, displayDuringSetup: true)
	}

	tiles (scale: 2){      
	
		multiAttributeTile(name:"AlarmStatus", type: "generic", width: 6, height: 3, decoration:"flat"){
        	tileAttribute ("device.status", key: "PRIMARY_CONTROL") {
            attributeState "disarmed", label:'${name}', icon: "st.security.alarm.off", backgroundColor: "#505050"
            attributeState "home", label:'${name}', icon: "st.Home.home4", backgroundColor: "#00BEAC"
            attributeState "away", label:'${name}', icon: "st.security.alarm.on", backgroundColor: "#008CC1"
			attributeState "alarm", label:'${name}', icon: "st.security.alarm.on", backgroundColor: "#d44556"
        	}
        	tileAttribute("device.events", key: "SECONDARY_CONTROL", wordWrap: true) {
			attributeState("default", label:'${currentValue}')}
		}
        
        standardTile("VArmAway", "armaway", height: 2, width:2, decoration:"flat", inactiveLabel: false) {
            state "inactive", label:"Away", action:"VisonicArmAway", backgroundColor:"#D8D8D8"
            state "changing", label:"Arming Away", action:"", backgroundColor:"#FF9900"
            state "active", label:"Armed Away", action:"", backgroundColor:"#00CC00"
        }
        standardTile("VArmHome", "armhome", height: 2, width: 2, decoration:"flat", inactiveLabel: false) {
            state "inactive", label:"Home", action:"VisonicArmHome", backgroundColor:"#D8D8D8"
            state "changing", label:"Arming Home", action:"", backgroundColor:"#FF9900"
            state "active", label:"Armed Home", action:"", backgroundColor:"#00CC00"
        }
        standardTile("VDisarm", "disarm", height: 2, width: 2, decoration:"flat", inactiveLabel: false) {
            state "inactive", label:"Disarm", action:"VisonicDisarm", backgroundColor:"#D8D8D8"
            state "changing", label:"Disarming", action:"", backgroundColor:"#FF9900"
            state "active", label:"Disarmed", action:"", backgroundColor:"#00CC00"
        }
        
        (1..8).each { n ->
            valueTile("zonename$n", "visonicname$n", height: 1, width: 2) {
                state "default", label:'${currentValue}', backgroundColor:"#FFFFFF"}
            standardTile("zone$n", "visonic$n", height: 1, width: 1) {
                state "inactive", label:"Inactive", action:"", icon:""
                state "active", label:"Active", action:"", icon:"", backgroundColor:"#00CC00"
                state "closed", label:"Closed", action:"", icon:""
                state "open", label:"Open", action:"", icon:"", backgroundColor:"#00CC00"
                }
		}
        
		standardTile("refresh", "device.refresh", inactiveLabel: false, decoration: "flat", width: 1, height: 1) {
			state "default", label:"", action:"refresh", icon:"st.secondary.refresh"
		}
      
        standardTile("configure", "device.configure", inactiveLabel: false, width: 1, height: 1, decoration: "flat") {
			state "configure", label:'', action:"configure", icon:"st.secondary.configure"
		}
       
        standardTile("customzones", "device.zoneupdate", inactiveLabel: false, width: 1, height: 1, decoration: "flat") {
			state "configure", label:'Zone Names', action:"updateZonesNS"
		}

        valueTile("ip", "ip", decoration: "flat", width: 2, height: 1) {
    		state "ip", label:'ST IP Addr.\r\n${currentValue}'
		}
        
        standardTile("createtile", "device.createzonedevices", inactiveLabel: false, decoration: "flat", width: 2, height: 1) {
			state "cancreatezonedevices", label:'Create Zone Devices', action:"Vcreatezonedevices", icon: "st.unknown.zwave.remote-controller"
            state "cantcreatezonedevices", label:'Remove Child Devices to Create again', action:"", icon: ""
		}
        standardTile("removetile", "device.removezonedevices", inactiveLabel: false, decoration: "flat", width: 2, height: 1) {
			state "default", label:'Remove Zone Devices', action:"Vremovezonedevices", icon: "st.samsung.da.washer_ic_cancel"
		}
        
        standardTile("testtile", "device.testfunction", inactiveLabel: false, decoration: "flat", width: 2, height: 1) {
			state "default", label:'test_function', action:"Vtestfunction"
		}
        
        //This alarm tile is only needed so that the state of the alarm can trigger other things in CoRE (or similar)
        //To use this, make Core trigger if Alarm state changes to Both (this will tell you the alarm is going off), or
        //if Alarm state changes to off (this will tell you the alarm has been disarmed)
        standardTile("alarm", "device.alarm", inactiveLabel: false, width: 1, height: 1, decoration: "flat") {
			state "off", label:'Off= Disarmed'
			state "strobe", label:'Strobe= Home'
			state "siren", label:'Siren= Away'
            state "both", label:'Both= Alarm'
		}
    }

	main(["AlarmStatus"])
    details(["AlarmStatus", "VArmAway", "VArmHome", "VDisarm",
             
             // Add all your zones here (zonenameX first then zoneX)- e.g. add "zonename6", "zone6" if you want to display zone6 in the alarm panel
             "zonename1", "zone1", "zonename2", "zone2", "zonename3", "zone3", "zonename4", "zone4",
             "zonename5", "zone5", "zonename6", "zone6", 
             
             "refresh", "configure", "ip", "alarm", "createtile", "removetile"
             , "testtile" //If you have trouble creating your child zones you can uncomment the start of this line (remove // before the comma)
             				//After pressing the "test_function" button on your phone you can re-comment it, to tidy up your alarm panel device.
                            //This is only needed if you have trouble creating your zones.
             ])
}

def VisonicArmAway() {
	//Send an arm away command to visonic and log that it is changing
	log.debug "armaway()"
    sendEvent(name: "armaway", value: "changing")
    sendEvent(name: "armhome", value: "inactive", displayed: false)
    sendEvent(name: "disarm", value: "inactive", displayed: false)
    getAction("/armaway")
}

def VisonicArmHome() {
	//Send an arm home command to visonic and log that it is changing
	log.debug "armhome()"
    sendEvent(name: "armaway", value: "inactive", displayed: false)
    sendEvent(name: "armhome", value: "changing")
    sendEvent(name: "disarm", value: "inactive", displayed: false)
    getAction("/armhome")
}

def VisonicDisarm() {
	//Send a disarm command to visonic and log that it is changing
	log.debug "disarm()"
    sendEvent(name: "armaway", value: "inactive", displayed: false)
    sendEvent(name: "armhome", value: "inactive", displayed: false)
    sendEvent(name: "disarm", value: "changing")
    getAction("/disarm")
}

//These functions will create and remove child devices
def Vcreatezonedevices() {
	//Vremovezonedevices()
    //Update the tile status so we dont do it again
    sendEvent(name: "createzonedevices", value: "cantcreatezonedevices", displayed: false)
	log.debug "Requesting List of Visonic Zones"
    getAction("/getzonenames")
}

def Vremovezonedevices() {
	log.debug "Removing Child Zone Devices"
    try {
        getChildDevices()?.each {
            deleteChildDevice(it.deviceNetworkId)
        }
    } catch (e) {
        log.error "Error deleting devices, probably none exist: ${e}"
    }
    
    //Update tile so that we can create devices again if desired
    sendEvent(name: "createzonedevices", value: "cancreatezonedevices", displayed: false)
}

def Vtestfunction() {
	//log.debug "got here"
    log.debug prename
    if (device.currentValue("createzonedevices") == "cancreatezonedevices") {
    	log.debug "state correct"
    }
    try {
        def curdevice = getChildDevices()?.find { it.deviceNetworkId == "visonictestdevice"}
        if (curdevice) {
            //Do nothing as we already have a test device
        }
        else {
            addChildDevice("cjcharles0", "Visonic Contact Zone", "visonictestdevice", device.hub.id, [name: "visonic test device", label: name, completedSetup: true])
        }
    } catch (e) {
        log.error "Couldnt find device, probably doesn't exist so safe to add a new one: ${e}"
        addChildDevice("cjcharles0", "Visonic Contact Zone", "visonictestdevice", device.hub.id, [name: "visonic test device", label: name, completedSetup: true])
    }
}

//This will configure the WeMos D1 to talk to ST
def configure(){
	def cmds = []
	log.debug "Configuring Visonic (getting zones+types, configuring IP/port/timeout)"
    cmds << getAction("/status")
    
    def inactivitystring
    if (settings.inactivityseconds == null) {
    	inactivitystring = "&inactivity_seconds=10"
    }
    else if (settings.inactivityseconds.isInteger()) {
    	inactivitystring = "&inactivity_seconds=${settings.inactivityseconds}"
    }
    else {
    	inactivitystring = "&inactivity_seconds=10"
    }
    //log.debug inactivitystring
    //Send the details to SmartThings
    cmds << getAction("/config?ip_for_st=${device.hub.getDataValue("localIP")}&port_for_st=${device.hub.getDataValue("localSrvPortTCP")}${inactivitystring}")
    return cmds
}

def refresh() {
	log.debug "refresh()"
    //SendEvents should be before any getAction, otherwise getAction does nothing
    sendEvent(name: "ip", value: device.hub.getDataValue("localIP")+"    Port:"+device.hub.getDataValue("localSrvPortTCP"), displayed: false)
    //Now refresh Alarm status
    getAction("/refresh")
    //getAction("/getzonenames")
}

def installed() {
	log.debug "installed()"
	//configure()
}

def updated() {
	log.debug "updated()"
    configure()
}

def ping() {
    log.debug "ping()"
    getAction("/ping")
}

//These functions are needed due to the alarm device capability and hence will server to arm/disarm the alarm (though unlikely to be called)
def off() {
	VisonicDisarm()
}
def strobe() {
	VisonicArmHome()
}
def siren() {
	VisonicArmAway()
}
def both() {
	//Cant manually set state to alarm, hence this has no action
}

def parse(description) {

    def map = [:]
    def events = []
    def cmds = []
    
    if(description == "updated") return
    def descMap = parseDescriptionAsMap(description)

    def body = new String(descMap["body"].decodeBase64())

    def slurper = new JsonSlurper()
    def result = slurper.parseText(body)
    
    log.debug result
    
    //Received an alarm stat string so update tile status but dont display it since the event string below will be logged
    if (result.containsKey("stat_str")) {
    	if (result.stat_str=="Disarmed" || result.stat_str=="Disarm") {
            sendEvent(name: "disarm", value: "active", displayed: false)
            sendEvent(name: "armaway", value: "inactive", displayed: false)
        	sendEvent(name: "armhome", value: "inactive", displayed: false)
            sendEvent(name: "status", value: "disarmed", displayed: false)
            sendEvent(name: "alarm", value: "off", displayed: false)
            log.debug "Disarmed Status found"}
        else if (result.stat_str=="Armed Away" || result.stat_str=="Arm Away") {
            sendEvent(name: "disarm", value: "inactive", displayed: false)
    		sendEvent(name: "armaway", value: "active", displayed: false)
        	sendEvent(name: "armhome", value: "inactive", displayed: false)
            sendEvent(name: "status", value: "away", displayed: false)
            sendEvent(name: "alarm", value: "siren", displayed: false)
            log.debug "Armed Away Status found"}
        else if (result.stat_str=="Armed Home" || result.stat_str=="Arm Home") {
            sendEvent(name: "disarm", value: "inactive", displayed: false)
    		sendEvent(name: "armaway", value: "inactive", displayed: false)
        	sendEvent(name: "armhome", value: "active", displayed: false)
            sendEvent(name: "status", value: "home", displayed: false)
            sendEvent(name: "alarm", value: "strobe", displayed: false)
            log.debug "Armed Home Status found"}
        else if (result.stat_str=="Delay Alarm" || result.stat_str=="Confirm Alarm") {
            sendEvent(name: "disarm", value: "inactive", displayed: false)
    		sendEvent(name: "armaway", value: "inactive", displayed: false)
        	sendEvent(name: "armhome", value: "inactive", displayed: false)
            sendEvent(name: "status", value: "alarm", displayed: false)
            sendEvent(name: "alarm", value: "both", displayed: false)
            log.debug "Alarm Status found"}
    }
    
    //If we receive a key containing update from ('...from') then add it to the event log and update tile
	if (result.containsKey("stat_update_from")) {
        def dateTime = new Date()
        def sensorStateChangedDate = dateTime.format("yyyy-MM-dd HH:mm", location.timeZone)
        def status_string = result.stat_str + " by " + result.stat_update_from + " at " + sensorStateChangedDate
        //Send the status string that we have built
        sendEvent(name: "events", value: "${status_string}", displayed: true, isStateChange: true)
    }
    
    if (result.containsKey("zone_status")) {
    	//Got a zone status so first try to find the correct child device
        def curdevice = getChildDevices()?.find { it.deviceNetworkId == "visoniczone"+result.zone_id}
        //Now switch based on what has happened
    	switch (result.zone_status) {
			case "Violated (Motion)":
				//log.debug "Got motion zone - " + result.zone_id + curdevice
            	sendEvent(name: "visonic"+result.zone_id, value: "active", displayed: false, isStateChange: true)
                curdevice?.active()
            	break
            case "No Motion":
				//log.debug "Motion stopped in zone - " + result.zone_id
            	sendEvent(name: "visonic"+result.zone_id, value: "inactive", displayed: false, isStateChange: true)
                curdevice?.inactive()
            	break
            case "Open":
				//log.debug "Got Open zone - " + result.zone_id
            	sendEvent(name: "visonic"+result.zone_id, value: "open", displayed: false, isStateChange: true)
                curdevice?.open()
                break
            case "Closed":
				//log.debug "Got Closed zone - " + result.zone_id
            	sendEvent(name: "visonic"+result.zone_id, value: "closed", displayed: false, isStateChange: true)
                curdevice?.close()
                break
		}
    }
    
    //This code will pull zone information out of the /getzonenamespage (and allows for zones not in order)
    if (result.containsKey("maxzoneid")) {
    	/*def prependname
        if (getDeviceDataByName("prezonename")) { prependname = getDeviceDataByName("prezonename") } else { prependname = prezonename }
    	def postpendname
        if (getDeviceDataByName("postzonename")) { postpendname = getDeviceDataByName("postzonename") } else { postpendname = postzonename }*/
    	for (def curzone in result.zones) {
        	//log.debug curzone.zoneid + " - " + curzone.zonename + " - " + curzone.zonetype
            //Here we create a child device with the right name and DNI

            def thiszonename = ""
            if (prename != null) {thiszonename = thiszonename + prename + " "}
            thiszonename = thiszonename + curzone.zonename
            if (postname != null) {thiszonename = thiszonename + " " + postname}
            log.debug "Adding child Name: ${thiszonename}, ID: ${curzone.zoneid} to ${device.hub.id}"
            
            //No longer add the child device here since we cannot use the multi zone to work with CoRE (simulated sensors need a different tile name)
            //addChildDevice("cjcharles0", "Visonic Multi Zone", "visoniczone${curzone.zoneid}", device.hub.id, [name: thiszonename])
            //Now we find the device that was just created
            //def curdevice = getChildDevices()?.find { it.deviceNetworkId == "visoniczone"+curzone.zoneid}
            //Could now do something like this
            //curdevice?.inactive()
            
            //If it is a magnetic sensor then add it as a contact sensor and update the tile on this device
            if (curzone.zonetype == "Magnet") {
            	addChildDevice("cjcharles0", "Visonic Contact Zone", "visoniczone${curzone.zoneid}", device.hub.id, [name: thiszonename])
            	sendEvent(name: "visonic"+(curzone.zoneid), value: "closed")
            }
            //If it is a motion sensor then add it as a motion sensor and update the tile on this device
            if (curzone.zonetype == "Motion") {
            	addChildDevice("cjcharles0", "Visonic Motion Zone", "visoniczone${curzone.zoneid}", device.hub.id, [name: thiszonename])
            	sendEvent(name: "visonic"+(curzone.zoneid), value: "inactive")
            }
            //Finally update the name of the tile on this device
            sendEvent(name: "visonicname"+(curzone.zoneid), value: curzone.zonename)
    	}
    }
    
    //This zone code is quicker and more efficient as /status loads quickly, but requires sequential zone IDs
    /*if (result.containsKey("enroled_zones")) {
    	log.debug "Configuring zone names and types"
		//Iterate through each of the zones
        result.enroled_zones.eachWithIndex { zone, zoneIndex -> 
            //First store the Zone Names
            sendEvent(name: "visonicname"+(zoneIndex+1), value: zone.zoneName)
            //If it is a magnetic sensor then set it closed to start
            if ((zone.sensorType) == "Magnet") {
            	sendEvent(name: "visonic"+(zoneIndex+1), value: "closed")
            }
            //If it is a motion sensor the set it inactive first
            if ((zone.sensorType) == "Motion") {
            	sendEvent(name: "visonic"+(zoneIndex+1), value: "inactive")
            }
		}
    }*/
}

private getAction(uri){ 
  log.debug "uri ${uri}"
  updateDNI()
  
  def userpass
  
  if(password != null && password != "") 
    userpass = encodeCredentials("admin", password)
    
  def headers = getHeader(userpass)
  
  def hubAction = new physicalgraph.device.HubAction(
    method: "GET",
    path: uri,
    headers: headers
  )
  return hubAction    
}

def parseDescriptionAsMap(description) {
	description.split(",").inject([:]) { map, param ->
		def nameAndValue = param.split(":")
		map += [(nameAndValue[0].trim()):nameAndValue[1].trim()]
	}
}

private getHeader(userpass = null){
    def headers = [:]
    headers.put("Host", getHostAddress())
    headers.put("Content-Type", "application/x-www-form-urlencoded")
    if (userpass != null)
       headers.put("Authorization", userpass)
    return headers
}

private encodeCredentials(username, password){
	def userpassascii = "${username}:${password}"
    def userpass = "Basic " + userpassascii.encodeAsBase64().toString()
    return userpass
}

private updateDNI() { 
    if (state.dni != null && state.dni != "" && device.deviceNetworkId != state.dni) {
       device.deviceNetworkId = state.dni
    }
}

private getHostAddress() {
    if(getDeviceDataByName("ip") && getDeviceDataByName("port")){
        return "${getDeviceDataByName("ip")}:${getDeviceDataByName("port")}"
    }else{
	    return "${ip}:80"
    }
}
