/**
 *  Copyright 2017 Chris Charles
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Neo Thermostat (Child Device of Neo Hub Bridge)
 *
 *  Author: Chris Charles (cjcharles0)
 *  Date: 2017-04-26
 *  
 *  Important note, since each command is requesting something from the server, they cannot be void's otherwise
 *  nothing seems to come back from ST, even though it should receive the JSON anyway
 */

import groovy.json.JsonSlurper

metadata {
	definition (name: "Neo Thermostat", namespace: "cjcharles0", author: "Chris Charles")
    { 
    	capability "Refresh"
		capability "Actuator"
		capability "Temperature Measurement"
		capability "Thermostat"
		capability "Polling"
		capability "Sensor"
        capability "Configuration"
		
		command "refresh" // Refresh - this does nothing as otherwise there will be too many refresh commands being sent
		command "requestrefresh" // Refresh
        command "raiseSetpoint" // Custom
		command "lowerSetpoint" // Custom
		command "increaseDuration" // Custom
		command "setTempHoldOn" // Custom
		command "setTempHoldOff" // Custom
        command "away" // Custom
		command "awayOff" // Custom

		attribute "temperature","number" // Temperature Measurement
		attribute "thermostatSetpoint","number" // Thermostat
		attribute "nextSetpointText", "string" // Custom
		attribute "statusText", "string" // Custom
		//attribute "holdtime", "string" // Custom
        
        
	}
    
    preferences {
        section {
        	//Preferences here
        }
	}

//Thermostat Temp and State
	tiles(scale: 2) {

		// Main multi information tile
		multiAttributeTile(name:"temperature", type:"thermostat", width:6, height:3) {
			tileAttribute("device.temperature", key: "PRIMARY_CONTROL") {
				attributeState("default", label:'${currentValue}째', unit:"C",
					backgroundColors:[
							// Celsius
							[value: 0, color: "#153591"],
							[value: 7, color: "#1e9cbb"],
							[value: 15, color: "#90d2a7"],
							[value: 23, color: "#44b621"],
							[value: 28, color: "#f1d801"],
							[value: 35, color: "#d04e00"],
							[value: 37, color: "#bc2323"]
					])
			}

			// Operating State - used to get background colour when type is 'thermostat'.
			tileAttribute("device.thermostatStatus", key: "OPERATING_STATE") {
				attributeState("Heating", backgroundColor:"#ffa81e", defaultState: true)
				attributeState("Idle (Auto)", backgroundColor:"#44b621")
				attributeState("Idle (Custom)", backgroundColor:"#44b621")
				attributeState("Idle (Day Off)", backgroundColor:"#44b621")
				attributeState("Idle (Economy)", backgroundColor:"#44b621")
				attributeState("Idle (Away)", backgroundColor:"#44b621")
				attributeState("Off", backgroundColor:"#269bd2")
			}
		}
       
		valueTile("thermostatSetpoint", "device.thermostatSetpoint", width: 1, height: 1, decoration: "flat") {
			state "thermostatSetpoint", label:'${currentValue}째C', backgroundColor:"#ffffff"
		}
		standardTile("raiseSetpoint", "device.thermostatSetpoint", width: 1, height: 1, decoration: "flat") {
			state "setpoint", action:"raiseSetpoint", icon:"st.thermostat.thermostat-up"
		}
		standardTile("lowerSetpoint", "device.thermostatSetpoint", width: 1, height: 1, decoration: "flat") {
			state "setpoint", action:"lowerSetpoint", icon:"st.thermostat.thermostat-down"
		}
		standardTile("increaseTime", "device.increaseTime", width: 1, height: 1, decoration: "flat") {
			state "default", action:"increaseDuration", label:'+30m'
		}
		valueTile("holdtime", "device.holdtime", inactiveLabel: false, decoration: "flat", width: 1, height: 1) {
			state "default", label:'${currentValue}' // icon TBC
		}
        standardTile("setTempHold", "setTempHold", inactiveLabel: false, decoration: "flat", width: 1, height: 1) {
			state "off", action:"setTempHoldOn", label:'Set Temp' // icon TBC
			state "offhold", action:"setTempHoldOn", label:'Set Hold' // icon TBC
            state "cancel", action:"setTempHoldOff", label:'Cancel Hold' // icon TBC
		}
        
        
		valueTile("nextSetpointText", "device.nextSetpointText", width: 3, height: 1) {
			state "default", label:'${currentValue}'
		}
        valueTile("statusText", "statusText", decoration: "flat", width: 3, height: 1) {     //, inactiveLabel: false
			state "default", label:'${currentValue}'
		}
        
        
        valueTile("floortemp", "floortemp", decoration: "flat", width: 1, height: 1) {
    		state "floortemp", label:'Floor Temp\r\n${currentValue}'
		}
        standardTile("away", "away", inactiveLabel: false, decoration: "flat", width: 2, height: 1) {
			state "off", action:"away", label:'Set Away' // icon TBC
			state "on", action:"awayOff", label:'Away Activated\r\nPress to cancel' // icon TBC
		}
		standardTile("refresh", "device.refresh", inactiveLabel: false, decoration: "flat", width: 1, height: 1) {
			state "default", action:"requestrefresh", label: "Refresh", icon:"st.secondary.refresh"
		}
        
        
		standardTile("off", "device.off", inactiveLabel: false, decoration: "flat", width: 1, height: 1) {
			state "on", action:"off", icon:"st.thermostat.heating-cooling-off"
 			state "off", action:"on", label:'Turn On', icon:"st.thermostat.heating-cooling-off"
		}
		
		main "temperature"
		details(
				[
				"temperature",
				"nextSetpointText", "raiseSetpoint", "increaseTime", "holdtime",
				"statusText", "lowerSetpoint", "thermostatSetpoint", "setTempHold",
				"floortemp", "away", "refresh"])
	}
}


def refresh() {
	log.debug "Refreshing thermostat data from parent"
    //Get the parent to request a refresh but this should be the parent showing the actual refresh command
    //parent.childRequestingRefresh()
}
def ping() {
}
def poll() {
}
def installed() {
}
def updated() {
}

def requestrefresh() {
	parent.childRequestingRefresh()
}

def processNeoResponse(result) {
	//Response received from Neo Hub so process it (mainly used for refresh, but could also process the success/fail messages)
	def statusTextmsg = ""
	def cmds = []

	//log.debug result
    if (result.containsKey("relaydevice")) {
    	//If we have a relaydevice key then we have a response to a command we sent, so process it here
        if (result.relayresult.containsKey("result")) {
    		//We have a success result from a command so process it here by pasting in the response and updating tile
            log.debug "success on last command: " + result.relayresult.result
            refresh()
        	cmds << sendEvent(name: "statusText", value: result.relayresult)
        }
    }
    else if (result.containsKey("device")) {
    	//If we have a device key then it is probably a refresh command
        if (result.containsKey("CURRENT_TEMPERATURE")) {
        	//Got a temperature so update the tile
            //log.debug "got a temp = " + result.CURRENT_TEMPERATURE
            cmds << sendEvent(name: "temperature", value: result.CURRENT_TEMPERATURE)
        }
        if (result.containsKey("CURRENT_SET_TEMPERATURE")) {
        	//Got a set temperature so update it if above 15 (otherwise Away will set this to 5째 annoyingly)
        	def settempint = result.CURRENT_SET_TEMPERATURE.toBigDecimal().toInteger()
            if (settempint > 15) {
            	cmds << sendEvent(name: "thermostatSetpoint", value: settempint)
            }
        }
        if (result.containsKey("CURRENT_FLOOR_TEMPERATURE")) {
        	//Update the floor temperature in case anybody cares!
        	cmds << sendEvent(name: "floortemp", value: result.CURRENT_FLOOR_TEMPERATURE)
        }
        if (result.containsKey("HOLD_TIME")) {
        	if (result.HOLD_TIME == "0:00") {
            	//Here we have zero hold time so run until next on time
            	statusTextmsg = "Set to " + result.CURRENT_SET_TEMPERATURE + "C until "
                if (result.NEXT_ON_TIME.reverse().take(3).reverse() == "255") {
                	//If we see 255:255 in hh:mm field then it is set permanently
                	statusTextmsg = statusTextmsg + "changed"
                }
                else {
                	statusTextmsg = statusTextmsg + result.NEXT_ON_TIME.reverse().take(5).reverse()
                }
            	cmds << sendEvent(name: "nextSetpointText", value: statusTextmsg)
            }
            else {
            	//Here we do have a hold time so display temp and time
            	statusTextmsg = "Holding " + result.HOLD_TEMPERATURE + "째C for " + result.HOLD_TIME
            	cmds << sendEvent(name: "nextSetpointText", value: statusTextmsg)
            }
        }
        
        if (result.containsKey("AWAY")) {
        	//Update away status as this is the most important parameter for Neostats
            if (result.AWAY == false) {
                cmds << sendEvent(name: "away", value: "off")
            }
            else {
                cmds << sendEvent(name: "away", value: "on")
            }
        }
        if (result.containsKey("HOLD_TEMPERATURE")) {
        }
	}
    return cmds
}


def increaseDuration() {
	def cmds = []
    if (device.currentValue("holdtime")?.contains(':')) {
        def hoursandmins = device.currentValue("holdtime").split(":")
        //Now we calculate and update hours and minutes and send it to the holdtime tile
        if (hoursandmins[1] == "30") {
            hoursandmins[1] = "00"
            if (hoursandmins[0].toInteger() < 3) {
                hoursandmins[0] = (hoursandmins[0].toInteger() + 1)
            }
            else {
                hoursandmins[0] = "0"
                cmds << sendEvent(name: "setTempHold", value: "off")
            }
        }
        else {
            hoursandmins[1] = "30"
            cmds << sendEvent(name: "setTempHold", value: "offHold")
        }
        cmds << sendEvent(name: "holdtime", value: "${hoursandmins[0]}:${hoursandmins[1]}", displayed: true)
    }
    else {
    	//Here we should reset as it hasnt found
		cmds << sendEvent(name: "holdtime", value: "0:00", displayed: true)
        return cmds
    }
    return cmds
}

def away() {
	//Set away mode on
	def cmds = []
	if (state.debug) log.debug "${device.label}: away()"
	parent.childAwayOn(device.deviceNetworkId)
    cmds << sendEvent(name: "away", value: "on", displayed: true)
    return cmds
}
def awayOff() {
	//Set away mode off
	def cmds = []
	if (state.debug) log.debug "${device.label}: awayOff()"
	parent.childAwayOff(device.deviceNetworkId)
    cmds << sendEvent(name: "away", value: "off", displayed: true)
    return cmds
}

def setTempHoldOn() {
	def cmds = []
	if (state.debug) log.debug "${device.label}: set temp hold - setTempOn()"
    def newtemp = device.currentValue("thermostatSetpoint").toInteger()
    log.debug device.currentValue("holdtime")
    if (device.currentValue("holdtime") == "0:00") {
    	parent.childSetTemp(newtemp, device.deviceNetworkId)
    }
    else {
     	def hours = device.currentValue("holdtime").take(1)
    	def minutes = device.currentValue("holdtime").reverse().take(2)
        log.debug hours + " hours, " + minutes + "mins"
		parent.childHold(newtemp, hours, minutes, device.deviceNetworkId)
	}
    cmds << sendEvent(name: "setTempHold", value: "cancel")
    return cmds
}

def setTempHoldOff() {
	//Cancel the temp hold
	def cmds = []
	if (state.debug) log.debug "${device.label}: cancel hold/temp - setTempHoldOff()"
	parent.childCancelHold(device.deviceNetworkId)
    if (device.currentValue("holdtime") == "0:00") {
    	//We have 0:00 as hh:mm, so the next command will be a set_temp
        cmds << sendEvent(name: "setTempHold", value: "off")
    }
    else {
    	cmds << sendEvent(name: "setTempHold", value: "offHold")
    }
    return cmds
}


def raiseSetpoint() {
	//Called by tile to increase set temp box
	def cmds = []
	def newtemp = device.currentValue("thermostatSetpoint").toInteger() + 1
    cmds << sendEvent(name: "thermostatSetpoint", value: newtemp)
    return cmds
}

def lowerSetpoint() {
//called by tile to decrease set temp box
	def cmds = []
	def newtemp = device.currentValue("thermostatSetpoint").toInteger() - 1
    cmds << sendEvent(name: "thermostatSetpoint", value: newtemp)
    return cmds
}


def changeSetpoint() {
//Change to specific setpoint (may not be used? or could be used with boost)
}
