/**
 *  Copyright 2017 Chris Charles
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Visonic Controller
 *
 *  Author: Chris Charles (cjcharles0)
 *  Date: 2017-02-10
 */

import groovy.json.JsonSlurper

metadata {
	definition (name: "Visonic Alarm Panel", namespace: "cjcharles0", author: "Chris Charles") {
		capability "Contact Sensor"
		capability "Sensor"
		capability "Refresh"
        capability "Configuration"
		capability "Alarm"
        capability "Polling"
        
        attribute "device.alarm", "string"
        attribute "armaway", "string"
        attribute "armhome", "string"
        attribute "disarm", "string"
        attribute "lastaction", "string"
        
        command "reset"
        command "VisonicArmAway"
        command "VisonicArmHome"
        command "VisonicDisarm"
        command "sendInactive"
	}

	simulator {
	}
    
    preferences {
        
        input("password", "password", title:"Password", required:false, displayDuringSetup:true)
        input("ip", "string", title:"Visonic IP Address", description: "e.g. 192.168.1.10", required: true, displayDuringSetup: true)
	}

	tiles (scale: 2){      
	
		multiAttributeTile(name:"Alarm", type: "generic", width: 6, height: 3, decoration:"flat"){
        	tileAttribute ("device.alarm", key: "PRIMARY_CONTROL") {
            attributeState "disarmed", label:'${name}', icon: "st.security.alarm.off", backgroundColor: "#505050"
            attributeState "home", label:'${name}', icon: "st.Home.home4", backgroundColor: "#00BEAC"
            attributeState "away", label:'${name}', icon: "st.security.alarm.on", backgroundColor: "#008CC1"
			attributeState "alarm", label:'${name}', icon: "st.security.alarm.on", backgroundColor: "#d44556"
        	}
        	tileAttribute("device.events", key: "SECONDARY_CONTROL", wordWrap: true) {
			attributeState("default", label:'${currentValue}')}
		}
        
        standardTile("VArmAway", "armaway", height: 2, width:2, decoration:"flat", inactiveLabel: false) {
            state "inactive", label:"Away", action:"VisonicArmAway", backgroundColor:"#D8D8D8"
            state "changing", label:"Arming Away", action:"", backgroundColor:"#FF9900"
            state "active", label:"Armed Away", action:"", backgroundColor:"#00CC00"
        }
        standardTile("VArmHome", "armhome", height: 2, width: 2, decoration:"flat", inactiveLabel: false) {
            state "inactive", label:"Home", action:"VisonicArmHome", backgroundColor:"#D8D8D8"
            state "changing", label:"Arming Home", action:"", backgroundColor:"#FF9900"
            state "active", label:"Armed Home", action:"", backgroundColor:"#00CC00"
        }
        standardTile("VDisarm", "disarm", height: 2, width: 2, decoration:"flat", inactiveLabel: false) {
            state "inactive", label:"Disarm", action:"VisonicDisarm", backgroundColor:"#D8D8D8"
            state "changing", label:"Disarming", action:"", backgroundColor:"#FF9900"
            state "active", label:"Disarmed", action:"", backgroundColor:"#00CC00"
        }
        
		valueTile("zone1name", "visonic1name", height: 1, width: 2) {
            state "default", label:'${currentValue}', backgroundColor:"#FFFFFF"}
        standardTile("zone1", "visonic1", height: 1, width: 1) {
            state "inactive", label:"Inactive", action:"", icon:""
            state "active", label:"Active", action:"", icon:"", backgroundColor:"#00CC00"
            state "closed", label:"Closed", action:"", icon:""
            state "open", label:"Open", action:"", icon:"", backgroundColor:"#00CC00"
        }
        
		valueTile("zone2name", "visonic2name", height: 1, width: 2) {
            state "default", label:'${currentValue}', backgroundColor:"#FFFFFF"}
        standardTile("zone2", "visonic2", height: 1, width: 1) {
            state "inactive", label:"Inactive", action:"", icon:""
            state "active", label:"Active", action:"", icon:"", backgroundColor:"#00CC00"
            state "closed", label:"Closed", action:"", icon:""
            state "open", label:"Open", action:"", icon:"", backgroundColor:"#00CC00"
        }
        
        valueTile("zone3name", "visonic3name", height: 1, width: 2) {
            state "default", label:'${currentValue}', backgroundColor:"#FFFFFF"}
        standardTile("zone3", "visonic3", height: 1, width: 1) {
            state "inactive", label:"Inactive", action:"", icon:""
            state "active", label:"Active", action:"", icon:"", backgroundColor:"#00CC00"
            state "closed", label:"Closed", action:"", icon:""
            state "open", label:"Open", action:"", icon:"", backgroundColor:"#00CC00"
        }
        
        valueTile("zone4name", "visonic4name", height: 1, width: 2) {
            state "default", label:'${currentValue}', backgroundColor:"#FFFFFF"}
        standardTile("zone4", "visonic4", height: 1, width: 1) {
            state "inactive", label:"Inactive", action:"", icon:""
            state "active", label:"Active", action:"", icon:"", backgroundColor:"#00CC00"
            state "closed", label:"Closed", action:"", icon:""
            state "open", label:"Open", action:"", icon:"", backgroundColor:"#00CC00"
        }
        
        valueTile("zone5name", "visonic5name", height: 1, width: 2) {
            state "default", label:'${currentValue}', backgroundColor:"#FFFFFF"}
        standardTile("zone5", "visonic5", height: 1, width: 1) {
            state "inactive", label:"Inactive", action:"", icon:""
            state "active", label:"Active", action:"", icon:"", backgroundColor:"#00CC00"
            state "closed", label:"Closed", action:"", icon:""
            state "open", label:"Open", action:"", icon:"", backgroundColor:"#00CC00"
        }
        
		standardTile("refresh", "device.refresh", inactiveLabel: false, decoration: "flat", width: 1, height: 1) {
			state "default", label:"", action:"refresh", icon:"st.secondary.refresh"
		}
      
        standardTile("configure", "device.configure", inactiveLabel: false, width: 1, height: 1, decoration: "flat") {
			state "configure", label:'', action:"configure", icon:"st.secondary.configure"
		}

        valueTile("ip", "ip", decoration: "flat", width: 2, height: 1) {
    		state "ip", label:'ST IP Addr.\r\n${currentValue}'
		}
        
    }

	//main(["Status"])
    details(["Alarm", "VAlarmStatus", "VArmAway", "VArmHome", "VDisarm",
             
             "zone1name", "zone1", "zone2name", "zone2", "zone3name", "zone3", "zone4name", "zone4",
             "zone5name", "zone5", 
             
             "refresh", "configure", "ip"])

}

def installed() {
	log.debug "installed()"
	configure()
}

def updated() {
	log.debug "updated()"
    configure()
}

def VisonicArmAway() {
	//Send an arm away command to visonic and log that it is changing
	log.debug "armaway()"
    sendEvent(name: "armaway", value: "changing")
    sendEvent(name: "armhome", value: "inactive", displayed: false)
    sendEvent(name: "disarm", value: "inactive", displayed: false)
    postAction("/armaway")
}

def VisonicArmHome() {
	//Send an arm home command to visonic and log that it is changing
	log.debug "armhome()"
    sendEvent(name: "armaway", value: "inactive", displayed: false)
    sendEvent(name: "armhome", value: "changing")
    sendEvent(name: "disarm", value: "inactive", displayed: false)
    postAction("/armhome")
}

def VisonicDisarm() {
	//Send a disarm command to visonic and log that it is changing
	log.debug "disarm()"
    sendEvent(name: "armaway", value: "inactive", displayed: false)
    sendEvent(name: "armhome", value: "inactive", displayed: false)
    sendEvent(name: "disarm", value: "changing")
    postAction("/disarm")
}

def sendInactive(zone_id){
  log.debug "Inactive timeout for zone " + zone_id
  sendEvent(name: zone_id, value: "inactive", displayed: true, isStateChange: true)
}

/*def configure() {
	log.debug "configure()"
	log.debug "Configuring Device For SmartThings Use"
    sendEvent(name: "checkInterval", value: 12 * 60, data: [protocol: "lan", hubHardwareId: device.hub.hardwareID], displayed: false)
    def responses = []
    if (ip != null) state.dni = setDeviceNetworkId(ip, "80")
    state.hubIP = device.hub.getDataValue("localIP")
    state.hubPort = device.hub.getDataValue("localSrvPortTCP")
    responses << configureStatus()
    //responses << configureInstant(state.hubIP, state.hubPort, powerOnState)
    //responses << configureDefault()
    return response(responses)
}*/

def configure(){
	log.debug "Refreshing Visonic Status (zones+types)"
    postAction("/status")
}

def refresh() {
	log.debug "refresh()"
    //SendEvents must be before any postAction, otherwise postAction does nothing
    sendEvent(name: "ip", value: device.hub.getDataValue("localIP")+"    Port:"+device.hub.getDataValue("localSrvPortTCP"), displayed: false)
    //Now refresh Alarm status
    postAction("/refresh")
}

def ping() {
    //log.debug "ping()"
    postAction("/ping")
}


def parse(description) {
    def map = [:]
    def events = []
    def cmds = []
    
    if(description == "updated") return
    def descMap = parseDescriptionAsMap(description)

    def body = new String(descMap["body"].decodeBase64())

    def slurper = new JsonSlurper()
    def result = slurper.parseText(body)
    
    log.debug result
    
    //Received an alarm stat string so update tile status but dont display it since the event string below will be logged
    if (result.containsKey("stat_str")) {
    	if (result.stat_str=="Disarmed" || result.stat_str=="Disarm") {
            sendEvent(name: "disarm", value: "active", displayed: false)
            sendEvent(name: "armaway", value: "inactive", displayed: false)
        	sendEvent(name: "armhome", value: "inactive", displayed: false)
            sendEvent(name: "alarm", value: "disarmed", displayed: false)
            log.debug "Disarmed Status found"}
        else if (result.stat_str=="Armed Away" || result.stat_str=="Arm Away") {
            sendEvent(name: "disarm", value: "inactive", displayed: false)
    		sendEvent(name: "armaway", value: "active", displayed: false)
        	sendEvent(name: "armhome", value: "inactive", displayed: false)
            sendEvent(name: "alarm", value: "away", displayed: false)
            log.debug "Armed Away Status found"}
        else if (result.stat_str=="Armed Home" || result.stat_str=="Arm Home") {
            sendEvent(name: "disarm", value: "inactive", displayed: false)
    		sendEvent(name: "armaway", value: "inactive", displayed: false)
        	sendEvent(name: "armhome", value: "active", displayed: false)
            sendEvent(name: "alarm", value: "home", displayed: false)
            log.debug "Armed Home Status found"}
        else if (result.stat_str=="Delay Alarm" || result.stat_str=="Confirm Alarm") {
            sendEvent(name: "disarm", value: "inactive", displayed: false)
    		sendEvent(name: "armaway", value: "inactive", displayed: false)
        	sendEvent(name: "armhome", value: "inactive", displayed: false)
            sendEvent(name: "alarm", value: "alarm", displayed: false)
            log.debug "Alarm Status found"}
    }
    
    //If we receive a key containing '...from' then add it to the event log
	if (result.containsKey("stat_update_from")) {
        def dateTime = new Date()
        def sensorStateChangedDate = dateTime.format("yyyy-MM-dd HH:mm", location.timeZone)
        def status_string = result.stat_str + " by " + result.stat_update_from + " at " + sensorStateChangedDate
        //Send the status string that we have built
        sendEvent(name: "events", value: "${status_string}", isStateChange: true)
    }
    
    if (result.containsKey("zone_status")) {
    	switch (result.zone_status) {
			case "Violated (Motion)":
				log.debug "Got motion zone - " + result.zone_id
            	sendEvent(name: "visonic"+result.zone_id, value: "active", displayed: true, isStateChange: true)
            	break
            case "Open":
				log.debug "Got Open zone - " + result.zone_id
            	sendEvent(name: "visonic"+result.zone_id, value: "open", displayed: true, isStateChange: true)
                break
            case "Closed":
				log.debug "Got Closed zone - " + result.zone_id
            	sendEvent(name: "visonic"+result.zone_id, value: "closed", displayed: true, isStateChange: true)
                break
		}
    }
    
    //Not using this code any more as have been able to do it in the status page below
    /*if (result.containsKey("namedzonesenrolled")) {
        def i
    	for (i = 1; i < result.namedzonesenrolled; i++) {
            zonename = result."zone" + i + "name"
            zonetype = result."zone" + i + "type"
            log.debug i + " " + keyzonename + " " + zonename
        	sendEvent(name: "visonic"+i+"name", value: "${zonename}", displayed: true, isStateChange: true)
    	}
    }*/
    
    //Received zone information from Visonic
    if (result.containsKey("enroled_zones")) {
    	log.debug "Configuring zone names and types"
		//Iterate through each of the zones
        result.enroled_zones.eachWithIndex { zone, zoneIndex -> 
            //log.debug "zone" + (zoneIndex+1) + " data: " + zone.zoneName + " = " + zone.sensorType
            //First store the Zone Names
            sendEvent(name: "visonic"+(zoneIndex+1)+"name", value: zone.zoneName)
            //If it is a magnetic sensor then set it closed to start
            if ((zone.sensorType) == "Magnet") {
            	sendEvent(name: "visonic"+(zoneIndex+1), value: "closed")
            }
            //If it is a motion sensor the set it inactive first
            if ((zone.sensorType) == "Motion") {
            	sendEvent(name: "visonic"+(zoneIndex+1), value: "inactive")
            }
		}
    }
}

private postAction(uri){ 
  log.debug "uri ${uri}"
  updateDNI()
  
  def userpass
  
  if(password != null && password != "") 
    userpass = encodeCredentials("admin", password)
    
  def headers = getHeader(userpass)
  
  def hubAction = new physicalgraph.device.HubAction(
    method: "GET",
    path: uri,
    headers: headers
  )
  hubAction    
}

def parseDescriptionAsMap(description) {
	description.split(",").inject([:]) { map, param ->
		def nameAndValue = param.split(":")
		map += [(nameAndValue[0].trim()):nameAndValue[1].trim()]
	}
}

private getHeader(userpass = null){
    def headers = [:]
    headers.put("Host", getHostAddress())
    headers.put("Content-Type", "application/x-www-form-urlencoded")
    if (userpass != null)
       headers.put("Authorization", userpass)
    return headers
}

private encodeCredentials(username, password){
	def userpassascii = "${username}:${password}"
    def userpass = "Basic " + userpassascii.encodeAsBase64().toString()
    return userpass
}

private updateDNI() { 
    if (state.dni != null && state.dni != "" && device.deviceNetworkId != state.dni) {
       device.deviceNetworkId = state.dni
    }
}

private getHostAddress() {
    if(getDeviceDataByName("ip") && getDeviceDataByName("port")){
        return "${getDeviceDataByName("ip")}:${getDeviceDataByName("port")}"
    }else{
	    return "${ip}:80"
    }
}
