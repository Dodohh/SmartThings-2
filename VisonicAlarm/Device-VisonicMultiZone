/**
 *  Copyright 2017 Chris Charles
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Visonic Controller
 *
 *  Author: Chris Charles (cjcharles0)
 *  Date: 2017-02-10
 */
 
metadata {
	definition (name: "Visonic Multi Zone", namespace: "cjcharles0", author: "Chris Charles") {
		capability "Contact Sensor"
		capability "Sensor"

		command "inactive"
		command "active"
		command "open"
		command "closed"
	}

	simulator {
	}

	tiles {
		standardTile("contact", "device.contact", width: 2, height: 2) {
			state "inactive", label:'${name}', icon:"st.motion.motion.inactive", backgroundColor:"#00A0DC" //, action: "active"
			state "active", label:'${name}', icon:"st.motion.motion.active", backgroundColor:"#e86d13" //, action: "inactive"
            state "closed", label:'${name}', icon:"st.contact.contact.closed", backgroundColor:"#00A0DC" //, action: "open"
			state "open", label:'${name}', icon:"st.contact.contact.open", backgroundColor:"#e86d13" //, action: "closed"

		}
		main "contact"
		details "contact"
	}
}

def open() {
	log.trace "open()"
	sendEvent(name: "contact", value: "open")
}

def closed() {
	log.trace "closed()"
    sendEvent(name: "contact", value: "closed")
}

def close() {
	log.trace "close()"
    sendEvent(name: "contact", value: "close")
}

def inactive() {
	log.trace "inactive()"
	sendEvent(name: "contact", value: "inactive")
}

def active() {
	log.trace "active()"
    sendEvent(name: "contact", value: "active")
}

//This parse code is not needed, but included so it can be used instead of other simulated contact sensors
/*def parse(String description) {
	def pair = description.split(":")
	createEvent(name: pair[0].trim(), value: pair[1].trim())
}*/
